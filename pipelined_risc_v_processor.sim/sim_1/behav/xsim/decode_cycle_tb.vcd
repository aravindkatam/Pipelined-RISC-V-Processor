$date
   Wed Jun 25 09:54:22 2025
$end

$version
  2023.2
  $dumpfile ("decode_cycle_tb.vcd") 
$end

$timescale
  1ps
$end

$scope module decode_cycle_tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$var reg 1 # regwritew $end
$var reg 5 $ rdw [4:0] $end
$var reg 5 % rd_e [4:0] $end
$var reg 32 & instrd [31:0] $end
$var reg 32 ' pcd [31:0] $end
$var reg 32 ( pcplus4d [31:0] $end
$var reg 32 ) resultw [31:0] $end
$var wire 1 * regwritee $end
$var wire 1 + alusrce $end
$var wire 1 , memwritee $end
$var wire 1 - resultsrce $end
$var wire 1 . branche $end
$var wire 3 / alucontrole [2:0] $end
$var wire 2 0 immsrce [1:0] $end
$var wire 32 1 rd1_e [31:0] $end
$var wire 32 2 rd2_e [31:0] $end
$var wire 32 3 imm_exte [31:0] $end
$var wire 32 4 pce [31:0] $end
$var wire 32 5 pcplus4e [31:0] $end
$scope module uut $end
$var wire 1 6 clk $end
$var wire 1 7 rst $end
$var wire 1 8 regwritew $end
$var wire 5 9 rdw [4:0] $end
$var wire 5 : rd_e [4:0] $end
$var wire 32 ; instrd [31:0] $end
$var wire 32 < pcd [31:0] $end
$var wire 32 = pcplus4d [31:0] $end
$var wire 32 > resultw [31:0] $end
$var wire 1 * regwritee $end
$var wire 1 + alusrce $end
$var wire 1 , memwritee $end
$var wire 1 - resultsrce $end
$var wire 1 . branche $end
$var wire 3 / alucontrole [2:0] $end
$var wire 32 1 rd1_e [31:0] $end
$var wire 32 2 rd2_e [31:0] $end
$var wire 32 3 imm_exte [31:0] $end
$var wire 32 4 pce [31:0] $end
$var wire 32 5 pcplus4e [31:0] $end
$var wire 2 ? immsrce [1:0] $end
$var wire 1 @ regwrited $end
$var wire 1 A alusrcd $end
$var wire 1 B memwrited $end
$var wire 1 C resultsrcd $end
$var wire 1 D branchd $end
$var wire 2 E immsrcd [1:0] $end
$var wire 3 F alucontrold [2:0] $end
$var wire 32 G rd1_d [31:0] $end
$var wire 32 H rd2_d [31:0] $end
$var wire 32 I imm_extd [31:0] $end
$var reg 1 J regwrited_r $end
$var reg 1 K alusrcd_r $end
$var reg 1 L memwrited_r $end
$var reg 1 M resultsrcd_r $end
$var reg 1 N branchd_r $end
$var reg 3 O alucontrold_r [2:0] $end
$var reg 32 P rd1_d_r [31:0] $end
$var reg 32 Q rd2_d_r [31:0] $end
$var reg 32 R imm_extd_r [31:0] $end
$var reg 5 S rd_d_r [4:0] $end
$var reg 32 T pcd_r [31:0] $end
$var reg 32 U pcplus4d_r [31:0] $end
$scope module control_unit $end
$var wire 7 V op [6:0] $end
$var wire 7 V funct7 [6:0] $end
$var wire 3 W funct3 [2:0] $end
$var wire 1 @ regwrite $end
$var wire 1 A alusrc $end
$var wire 1 B memwrite $end
$var wire 1 C resultsrc $end
$var wire 1 D branch $end
$var wire 2 E immsrc [1:0] $end
$var wire 3 F alucontrol [2:0] $end
$var wire 2 X ALUOp [1:0] $end
$var wire 1 Y aluop $end
$scope module main_decoder $end
$var wire 7 V op [6:0] $end
$var wire 1 @ regwrite $end
$var wire 1 A alusrc $end
$var wire 1 B memwrite $end
$var wire 1 C resultsrc $end
$var wire 1 D branch $end
$var wire 2 E immsrc [1:0] $end
$var wire 2 Z aluop [1:0] $end
$upscope $end
$scope module alu_decoder $end
$var wire 2 [ aluop [1:0] $end
$var wire 3 W funct3 [2:0] $end
$var wire 7 V funct7 [6:0] $end
$var wire 7 V op [6:0] $end
$var wire 3 F alucontrol [2:0] $end
$upscope $end
$upscope $end
$scope module register_file $end
$var wire 1 6 clk $end
$var wire 1 7 rst $end
$var wire 1 8 we3 $end
$var wire 5 \ a1 [4:0] $end
$var wire 5 \ a2 [4:0] $end
$var wire 5 9 a3 [4:0] $end
$var wire 32 > wd3 [31:0] $end
$var wire 32 G rd1 [31:0] $end
$var wire 32 H rd2 [31:0] $end
$upscope $end
$scope module sign_extend $end
$var wire 32 ; in [31:0] $end
$var wire 2 E immsrc [1:0] $end
$var wire 32 I imm_ext [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end

#0
$dumpvars
0!
1"
0#
b0 $
bx %
b0 &
b0 '
b100 (
b0 )
x*
x+
x,
x-
x.
bx /
bz 0
bx 1
bx 2
bx 3
bx 4
bx 5
06
17
08
b0 9
bx :
b0 ;
b0 <
b100 =
b0 >
b0 ?
0@
0A
0B
0C
0D
b0 E
b0 F
b0 G
b0 H
b0 I
xJ
xK
xL
xM
xN
bx O
bx P
bx Q
bx R
bx S
bx T
bx U
b0 V
b0 W
bz X
0Y
b0 Z
bz0 [
b0 \
$end

#5000
1!
0*
0+
0,
0-
0.
b0 /
b0 1
b0 2
b0 3
b0 4
b100 5
16
0J
0K
0L
0M
0N
b0 O
b0 P
b0 Q
b0 R
b0 S
b0 T
b100 U

#10000
0!
0"
b0 5
06
07
b0 U

#15000
1!
16

#20000
0!
1"
1#
b101 $
b100000000000110110011 &
b10001000100010001000100010001 )
06
17
18
b101 9
b100000000000110110011 ;
b10001000100010001000100010001 >
1@
bx H
b1 I
b110011 V
b11 W
b10 Z
b10011 \

#25000
1!
1*
bx 2
b1 3
b100 5
16
1J
bx Q
b1 R
b11 S
b100 U

#30000
0!
b10100010000001010000011 &
06
b10100010000001010000011 ;
1A
1C
bx G
b10001000100010001000100010001 H
b101 I
b11 V
b11 W
b0 Z
b11 \

#35000
1!
1+
1-
bx 1
b10001000100010001000100010001 2
b101 3
16
1K
1M
bx P
b10001000100010001000100010001 Q
b101 R
b101 S

#40000
0!
b110100010010010000100011 &
06
b110100010010010000100011 ;
b1 ?
0@
1B
0C
b1 E
bx0x F
bx H
b1000 I
b100011 V
b11 W
b11 \

#45000
1!
0*
1,
0-
bx0x /
bx 2
b1000 3
16
0J
1L
0M
bx0x O
bx Q
b1000 R
b1000 S

#50000
0!
b10000001000000101100011 &
06
b10000001000000101100011 ;
b10 ?
0A
0B
1D
b10 E
b0x F
b0 I
b1100011 V
b11 W
1Y
b1 Z
bz1 [
b11 \

#55000
1!
0+
0,
1.
b0x /
b0 3
16
0K
0L
1N
b0x O
b0 R
b10 S
